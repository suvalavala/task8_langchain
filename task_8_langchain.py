# -*- coding: utf-8 -*-
"""Task-8  LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ei14kRmPpQgIc53t_ljluCwrduopCtKe
"""

!pip install langchainhub langchain-community

kb_facts = [
    {"animal": "dog", "type": "mammal"},
    {"animal": "whale", "type": "mammal"},
    {"animal": "eagle", "type": "bird"},
    {"animal": "shark", "type": "fish"},
    {"animal": "frog", "type": "amphibian"},
    {"animal": "bat", "type": "mammal"},
    {"animal": "penguin", "type": "bird"},
    {"animal": "crocodile", "type": "reptile"},
    {"animal": "cat", "type": "mammal"},
    {"animal": "sparrow", "type": "bird"},
]

kb_rules = [
    "All mammals are warm-blooded.",
    "Birds have feathers.",
    "Reptiles lay eggs.",
    "Fish live in water.",
    "Amphibians live both on land and in water.",
    "Warm-blooded animals maintain constant body temperature."
]

# Imports
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_core.documents import Document
from langchain.text_splitter import CharacterTextSplitter

# Sample Prolog-style KB facts and rules
kb_facts = """\
animal(dog).
animal(cat).
animal(eagle).
animal(sparrow).
flies(eagle).
flies(sparrow).
has_tail(dog).
has_tail(cat).
"""

kb_rules = """\
bird(X) :- animal(X), flies(X).
mammal(X) :- animal(X), has_tail(X).
"""

# Convert to LangChain Documents
docs = [
    Document(page_content=kb_facts, metadata={"source": "facts"}),
    Document(page_content=kb_rules, metadata={"source": "rules"})
]

# Split text into chunks
splitter = CharacterTextSplitter(chunk_size=100, chunk_overlap=0)
kb_chunks = splitter.split_documents(docs)

# Use HuggingFace embeddings (use default model: "all-MiniLM-L6-v2")
embedding = HuggingFaceEmbeddings()
vectorstore = FAISS.from_documents(kb_chunks, embedding)
retriever = vectorstore.as_retriever()

# sample test
retriever = vectorstore.as_retriever()
query = "Can a sparrow fly?"
retrieved_docs = retriever.invoke(query)

for doc in retrieved_docs:
    print("Source:", doc.metadata["source"])
    print("Content:", doc.page_content)
    print()